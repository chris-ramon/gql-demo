// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testChats(t *testing.T) {
	t.Parallel()

	query := Chats()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testChatsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Chat{}
	if err = randomize.Struct(seed, o, chatDBTypes, true, chatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Chats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChatsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Chat{}
	if err = randomize.Struct(seed, o, chatDBTypes, true, chatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Chats().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Chats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChatsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Chat{}
	if err = randomize.Struct(seed, o, chatDBTypes, true, chatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ChatSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Chats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChatsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Chat{}
	if err = randomize.Struct(seed, o, chatDBTypes, true, chatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ChatExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Chat exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ChatExists to return true, but got false.")
	}
}

func testChatsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Chat{}
	if err = randomize.Struct(seed, o, chatDBTypes, true, chatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	chatFound, err := FindChat(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if chatFound == nil {
		t.Error("want a record, got nil")
	}
}

func testChatsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Chat{}
	if err = randomize.Struct(seed, o, chatDBTypes, true, chatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Chats().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testChatsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Chat{}
	if err = randomize.Struct(seed, o, chatDBTypes, true, chatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Chats().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testChatsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	chatOne := &Chat{}
	chatTwo := &Chat{}
	if err = randomize.Struct(seed, chatOne, chatDBTypes, false, chatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chat struct: %s", err)
	}
	if err = randomize.Struct(seed, chatTwo, chatDBTypes, false, chatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = chatOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = chatTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Chats().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testChatsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	chatOne := &Chat{}
	chatTwo := &Chat{}
	if err = randomize.Struct(seed, chatOne, chatDBTypes, false, chatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chat struct: %s", err)
	}
	if err = randomize.Struct(seed, chatTwo, chatDBTypes, false, chatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = chatOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = chatTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Chats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func chatBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Chat) error {
	*o = Chat{}
	return nil
}

func chatAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Chat) error {
	*o = Chat{}
	return nil
}

func chatAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Chat) error {
	*o = Chat{}
	return nil
}

func chatBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Chat) error {
	*o = Chat{}
	return nil
}

func chatAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Chat) error {
	*o = Chat{}
	return nil
}

func chatBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Chat) error {
	*o = Chat{}
	return nil
}

func chatAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Chat) error {
	*o = Chat{}
	return nil
}

func chatBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Chat) error {
	*o = Chat{}
	return nil
}

func chatAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Chat) error {
	*o = Chat{}
	return nil
}

func testChatsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Chat{}
	o := &Chat{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, chatDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Chat object: %s", err)
	}

	AddChatHook(boil.BeforeInsertHook, chatBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	chatBeforeInsertHooks = []ChatHook{}

	AddChatHook(boil.AfterInsertHook, chatAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	chatAfterInsertHooks = []ChatHook{}

	AddChatHook(boil.AfterSelectHook, chatAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	chatAfterSelectHooks = []ChatHook{}

	AddChatHook(boil.BeforeUpdateHook, chatBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	chatBeforeUpdateHooks = []ChatHook{}

	AddChatHook(boil.AfterUpdateHook, chatAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	chatAfterUpdateHooks = []ChatHook{}

	AddChatHook(boil.BeforeDeleteHook, chatBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	chatBeforeDeleteHooks = []ChatHook{}

	AddChatHook(boil.AfterDeleteHook, chatAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	chatAfterDeleteHooks = []ChatHook{}

	AddChatHook(boil.BeforeUpsertHook, chatBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	chatBeforeUpsertHooks = []ChatHook{}

	AddChatHook(boil.AfterUpsertHook, chatAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	chatAfterUpsertHooks = []ChatHook{}
}

func testChatsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Chat{}
	if err = randomize.Struct(seed, o, chatDBTypes, true, chatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Chats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testChatsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Chat{}
	if err = randomize.Struct(seed, o, chatDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Chat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(chatColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Chats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testChatsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Chat{}
	if err = randomize.Struct(seed, o, chatDBTypes, true, chatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testChatsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Chat{}
	if err = randomize.Struct(seed, o, chatDBTypes, true, chatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ChatSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testChatsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Chat{}
	if err = randomize.Struct(seed, o, chatDBTypes, true, chatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Chats().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	chatDBTypes = map[string]string{`ID`: `int`, `UUID`: `varchar`}
	_           = bytes.MinRead
)

func testChatsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(chatPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(chatAllColumns) == len(chatPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Chat{}
	if err = randomize.Struct(seed, o, chatDBTypes, true, chatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Chats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, chatDBTypes, true, chatPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Chat struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testChatsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(chatAllColumns) == len(chatPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Chat{}
	if err = randomize.Struct(seed, o, chatDBTypes, true, chatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Chats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, chatDBTypes, true, chatPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Chat struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(chatAllColumns, chatPrimaryKeyColumns) {
		fields = chatAllColumns
	} else {
		fields = strmangle.SetComplement(
			chatAllColumns,
			chatPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ChatSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testChatsUpsert(t *testing.T) {
	t.Parallel()

	if len(chatAllColumns) == len(chatPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLChatUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Chat{}
	if err = randomize.Struct(seed, &o, chatDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Chat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Chat: %s", err)
	}

	count, err := Chats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, chatDBTypes, false, chatPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Chat struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Chat: %s", err)
	}

	count, err = Chats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
